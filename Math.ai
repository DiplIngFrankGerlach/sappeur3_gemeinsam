
int Math::shlC(int x)
{
   var int i;
   inline_cpp[[
     int save=x&0x80000000;     
     x=x<<1;
     if(save != 0) x=x|1;
   ]]
   return x;
}

int Math::shlC(int x,int n)
{
   var int i;
   inline_cpp[[
     int linkeBits;
     linkeBits=x>>(32-n);
     x=x<<n;
     x=x|linkeBits;
   ]]
   return x;
}

double Math::sinus(double rad)
{
   var double y;
   inline_cpp[[
       y = sin(rad);
   ]]
   return y;
}

double Math::asinus(double rad)
{
   var double y;
   inline_cpp[[
       y = asin(rad);
   ]]
   return y;
}

double Math::cosinus(double rad)
{
   var double y;
   inline_cpp[[
       y = cos(rad);
   ]]
   return y;
}

double Math::acosinus(double rad)
{
   var double y;
   inline_cpp[[
       y = acos(rad);
   ]]
   return y;
}

double Math::tangens(double rad)
{
   var double y;
   inline_cpp[[
       y = tan(rad);
   ]]
   return y;
}

double Math::atangens(double rad)
{
   var double y;
   inline_cpp[[
       y = atan(rad);
   ]]
   return y;
}

double Math::aHochB(double a, double b)
{
   var double y;
   inline_cpp[[
       y = ::pow(a,b);
   ]]
   return y;
}

double Math::euler(double x)
{
   var double y;
   inline_cpp[[
       y = exp(x);
   ]]
   return y;
}

double Math::pi()
{
   return 3.14159265358979323846264338327950288;
}

double Math::e()
{
   return 2.71828182845904523536028747135266249;
}


//2.71828182845904523536028747135266249

void Math::UnitTest()
{
   var PrintfClass pfc;
   var double y = this.sinus(45.0/360.0*2.0*3.1415);
   var double unten = 0.7070;
   var double oben = 0.7072;
   if( (y < unten) || (y > oben) )
   {
       pfc.fstr("Math::UnitTest() Fehler 1").pr();
       return;
   }
   pfc.fstr("$").sa(y).pr();
   y = y * 1000000000.0;
   y = y * 1000000000.0;
   y = y * 1000000000.0;
   y = y * 1000000000.0;
   pfc.fstr("$").sa(y).pr();
   pfc.fstr("$").saExp(y).pr();
   pfc.fstr("$").sa(this.e()).pr();
   
   pfc.fstr("Math::UnitTest() erfolgreich").pr(); 
}

/*berechne den Logarithmus zur Basis 2 einer Ganzzahl */
int Math::log2(int x)
{
  var int i = 0;
  while(x != 0) 
  {
    x = x >> 1;
    i++;
  }
  return i - 1;
}

/*PrÃ¼fe, on die Zahl eine Zweierpotenz ist */
int Math::pruefeZwP(int n)    
{
  var int verundet = n & (n - 1);
  if( (n > 0) && (verundet == 0) )
  { return 1; }
  return 0; 
}

void Math::polar(double rho, double theta,&Complex ausgabe)
{
    ausgabe.re = rho * this.cosinus( theta );
    ausgabe.im = rho * this.sinus  ( theta );
}


void Complex::wz(&Complex andere)
{
   re = andere.re;
   im = andere.im;
}

void Complex::wz(double i_re, double i_im)
{
   re = i_re;
   im = i_im;
}

Complex::Complex(&Complex andere)
{
   re = andere.re;
   im = andere.im;
}


Complex::Complex()
{
    re = 0.0;
    im = 0.0;
}

void Complex::mal(&Complex andere,&Complex ergebnis)
{
   ergebnis.re = (re * andere.re) - (im * andere.im);
   ergebnis.im = (re * andere.im) + (im * andere.re); 
}


void Complex::mal(double andere,&Complex ergebnis)
{
   ergebnis.re = re * andere;
   ergebnis.im = im * andere; 
}


void Complex::plus(&Complex andere,&Complex ergebnis)
{
   ergebnis.re = re + andere.re;
   ergebnis.im = im + andere.im;
}

void Complex::minus(&Complex andere,&Complex ergebnis)
{
   ergebnis.re = re - andere.re;
   ergebnis.im = im - andere.im;
}

void Complex::print(&String_16 ausgabe)
{
   ausgabe.clear();
   ausgabe.append(re);
   ausgabe.append(" ");
   ausgabe.append(im);
   ausgabe.append("i");
}

Complex::Complex(double i_re, double i_im)
{
   re = i_re;
   im = i_im;
}


void Math::pow(&Complex x,int y,&Complex ergebnis)
{
   inline_cpp[[
     complex<double> cppX(x.re,x.im);
     complex<double> cppErgebnis = std::pow(cppX,double(y));
     ergebnis.re = cppErgebnis.real();
     ergebnis.im = cppErgebnis.imag();
   ]]
}

double Math::fabs(double x)
{
  var double n = 0.0;
  if(x < n )
  {
      return x * -1.0;
  }
  return x;
}

double Math::wurzel(double x)
{
   var double ret;
   inline_cpp[[ ret = ::sqrt(x); ]]
   return ret;
}

