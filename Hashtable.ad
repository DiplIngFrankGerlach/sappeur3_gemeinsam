/***
* Sappeur Hashtable 
*
* Key-Value Style
  Keys and Values are stored as values, not pointers (may use pointers internally (RAII etc), though)
  keys must implement getHashCode() and equals()

  keyType type of the key entry
  valueType type of the value entry
  hashAC Hash Adapter Class
  compareAC Comparison Adapter Class
*/

generative_function[SPHT](keyType,valueType,hashAC,compareAC,assignerKey,assignerValue)[[

    class dllexport_a SPHT_Entry_@keyType@_@valueType@
    {
         @keyType@ key;
         @valueType@ value;
         SPHT_Entry_@keyType@_@valueType@ * next;
         int is_used; 
        methods:
         SPHT_Entry_@keyType@_@valueType@();

    };
    
    class dllexport_a SPHT_@keyType@_@valueType@
    {
         *SPHT_Entry_@keyType@_@valueType@ _elements[];
         int numberOfEntries;
         int iterator_pos;
         SPHT_Entry_@keyType@_@valueType@* iterator_next; 
       methods:
         SPHT_@keyType@_@valueType@();         

         void insert(&@keyType@ key,&@valueType@ value);

         int search(&@keyType@ key,&@valueType@ value);

         void del(&@keyType@ key);

         static void insertInternally(*SPHT_Entry_@keyType@_@valueType@ bins[],
                                      &@keyType@ key,
                                      &@valueType@ value);
                    
         void resetIterator();

         int nextElem(&@keyType@ key,&@valueType@ value);

         int size();

         void clear();
    };
    
]]


[[


  SPHT_Entry_@keyType@_@valueType@::SPHT_Entry_@keyType@_@valueType@()
  {
     is_used = 0;
  }
 

  SPHT_@keyType@_@valueType@::SPHT_@keyType@_@valueType@()
  {
     this.clear();
  }

  void SPHT_@keyType@_@valueType@::resetIterator()
  {
    iterator_pos = 0;
    iterator_next = NULL;
  }

  void SPHT_@keyType@_@valueType@::clear()
  {
     numberOfEntries = 0;
     _elements = new SPHT_Entry_@keyType@_@valueType@[3];
  }

  int SPHT_@keyType@_@valueType@::nextElem(&@keyType@ key,&@valueType@ value)
  {
     var @assignerKey@ ak;
     var @assignerValue@ av;
     if( iterator_next != NULL )
     {
         ak.assign(key,iterator_next.key);
         av.assign(value,iterator_next.value);
         iterator_next = iterator_next.next;
     }
     else
     {
        var int found = 0;
        while( (iterator_pos < _elements.sz) && (found == 0) )
        { 
           if( _elements[iterator_pos].is_used == 0) 
           {
              iterator_pos++;
           }
           else
           {
             found = 1;
           }
   
        }
        if( iterator_pos == _elements.sz)
        {
           return 0;
        }
        ak.assign(key,_elements[iterator_pos].key);  
        av.assign(value,_elements[iterator_pos].value);  
        iterator_next = _elements[iterator_pos].next; 
     
        iterator_pos++;
     }
     return 1;
  }

  int SPHT_@keyType@_@valueType@::size()
  {
     return numberOfEntries;
  }

  void SPHT_@keyType@_@valueType@::insertInternally(*SPHT_Entry_@keyType@_@valueType@ bins[],
                                                    &@keyType@ key,
                                                    &@valueType@ value)
  {


      var @hashAC@ hac;
      var @compareAC@ coac;
      var @assignerKey@ ak;
      var @assignerValue@ av;
      var int hc = hac.hash(key);
      var int m1 = -1;
      if( hc < 0 )
      {
        hc = hc * m1;
      } 
      var int pos = hc % bins.sz;


      if( (bins[pos].is_used != 0) && (coac.compare(bins[pos].key,key) == 0) )
      {
          var SPHT_Entry_@keyType@_@valueType@* entry = bins[pos].next;
          if( entry == NULL )
          {
             bins[pos].next = new SPHT_Entry_@keyType@_@valueType@;
             bins[pos].next.is_used = 1;
             ak.assign(bins[pos].next.key,key);
             av.assign(bins[pos].next.value,value);
          }
          else
          {
             var int inserted = 0;
             while( (inserted == 0) && (coac.compare(entry.key,key) == 0))
             {
                  if( entry.next == NULL )
                  {
                     entry.next = new SPHT_Entry_@keyType@_@valueType@;
                     entry.next.is_used = 1;
                     ak.assign(entry.next.key,key);
                     av.assign(entry.next.value,value);
                     inserted = 1;
                  }
                  else
                  {
                     entry = entry.next;
                  }
             }
             if( inserted == 0 )
             {
                ak.assign(entry.key,key);
                av.assign(entry.value,value);
             }
          }
      }
      else
      {
         bins[pos].is_used = 1;
         ak.assign(bins[pos].key,key);
         av.assign(bins[pos].value,value);
      }
  }

  int SPHT_@keyType@_@valueType@::search(&@keyType@ key,&@valueType@ value)
  {
      var @hashAC@ hac;
      var @compareAC@ coac;
      var @assignerKey@ ak;
      var @assignerValue@ av;
      var int hc = hac.hash(key);
      var int m1 = -1;
      if( hc < 0 )
      {
        hc = hc * m1;
      } 
      var int pos = hc % _elements.sz;

      if(_elements[pos].is_used == 1)
      {
          if(coac.compare(key,_elements[pos].key) == 1)
          {
              av.assign(value,_elements[pos].value); 
              return 1;
          }
          else
          {
             var SPHT_Entry_@keyType@_@valueType@* entry = _elements[pos].next;
             while( entry != NULL )
             {
                if( coac.compare(entry.key,key) == 1 )
                {
                   av.assign(value,entry.value);
                   return 1;
                }
                entry = entry.next;
             }
             return 0;
          }
      }
      return 0;    
  }

  void SPHT_@keyType@_@valueType@::insert(&@keyType@ key,&@valueType@ value)
  {
      if( numberOfEntries < 200000000 )
      {
         var int nep1 = numberOfEntries + 1;
         var int limit = ((_elements.sz * 7) / 10);
         if( nep1  > limit )
         {
            var int newCap = (_elements.sz + 1) * 2;
            var *SPHT_Entry_@keyType@_@valueType@ newElements[] = new SPHT_Entry_@keyType@_@valueType@[newCap];

            var @keyType@ key2;
            var @valueType@ value2;
            this.resetIterator();
            while(this.nextElem(key2,value2) )
            {
               this.insertInternally(newElements,key2,value2); 
            }
            _elements = newElements;
         }
         this.insertInternally(_elements,key,value);
         numberOfEntries++;
      }
  }

  void SPHT_@keyType@_@valueType@::del(&@keyType@ key)
  {
      var @hashAC@ hac;
      var @compareAC@ coac;
      var @assignerKey@ ak;
      var @assignerValue@ av;
      var int hc = hac.hash(key);
      var int m1 = -1;
      if( hc < 0 )
      {
        hc = hc * m1;
      } 
      var int pos = hc % _elements.sz;

      if(_elements[pos].is_used == 1)
      {
          if( coac.compare(_elements[pos].key,key) == 0 )
          {
              var SPHT_Entry_@keyType@_@valueType@* entry = _elements[pos].next;
              if( (entry != NULL) && (coac.compare(entry.key,key) == 1))
              {
                 _elements[pos].next = entry.next;
                 numberOfEntries = numberOfEntries - 1;
              }
              else
              {
                 var SPHT_Entry_@keyType@_@valueType@* previousEntry;
                 do
                 {
                    previousEntry = entry; 
                    entry=entry.next;
                 }
                 while( (entry != NULL) && (coac.compare(entry.key,key) == 0)  );

                 if(entry != NULL)
                 {
                     previousEntry.next = entry.next; 
                     numberOfEntries = numberOfEntries - 1;
                 }
              }
          }
          else
          {
              if( _elements[pos].next != NULL)
              {
                 var SPHT_Entry_@keyType@_@valueType@* entryNext = _elements[pos].next;
                 ak.assign(_elements[pos].key,entryNext.key);
                 av.assign(_elements[pos].value,entryNext.value);
                 _elements[pos].next = entryNext.next;
              }
              else
              {
                 _elements[pos].is_used = 0;   
              }
              numberOfEntries = numberOfEntries - 1;
          }
      } 
  }

]]


//Adapter Class for Hashing with longlong
class Hash_longlong
{
   methods:
     int hash(longlong x);
};

//Adapter class for comparison in SPHT
class Compare_longlong
{
   methods:
     int compare(longlong x1,longlong x2);
};

class Assigner_longlong
{
  methods:
     void assign(&longlong x1,&longlong x2);
};

//Adapter Class for Hashing with int 
class Hash_int
{
   methods:
     int hash(int x);
};

//Adapter class for comparison in SPHT
class Compare_int
{
   methods:
     int compare(int x1,int x2);
};

class Assigner_int
{
  methods:
     void assign(&int x1,&int x2);
};


class Assigner_double
{
  methods:
     void assign(&double x1,&double x2);
};

generative_function[HT_Zeiger_Adapter](ZuZeigendeKlasse) 
[[

  class HT_Zeiger_Adapter_@ZuZeigendeKlasse@
  {
      @ZuZeigendeKlasse@* zeiger;
      methods:
        void assign(&HT_Zeiger_Adapter_@ZuZeigendeKlasse@ a1,&HT_Zeiger_Adapter_@ZuZeigendeKlasse@ a2);
  };

]]

[[

void HT_Zeiger_Adapter_@ZuZeigendeKlasse@::assign(&HT_Zeiger_Adapter_@ZuZeigendeKlasse@ a1,&HT_Zeiger_Adapter_@ZuZeigendeKlasse@ a2)
{
    a1.zeiger = a2.zeiger;
}

]]


class HT_Gen
{
   generate SPHT(String_16,String_16,Hash_String_16,Compare_String_16,Assigner_String_16,Assigner_String_16);
   generate SPHT(int,int,Hash_int,Compare_int,Assigner_int,Assigner_int);
   generate SPHT(String_16,int,Hash_String_16,Compare_String_16,Assigner_String_16,Assigner_int);
   generate SPHT(int,String_16,Hash_int,Compare_int,Assigner_int,Assigner_String_16);
   generate SPHT(String_16,double,Hash_String_16,Compare_String_16,Assigner_String_16,Assigner_double);

  methods:
};

class HT_Pruefung
{
methods:

   static void unitTest();

   static void hashFunktionTest();
};



